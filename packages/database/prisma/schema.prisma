generator client {
  provider = "prisma-client-js"
  output   = "../dist"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TicketStatus {
  OPEN
  PENDING
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EconomyTransactionType {
  EARN
  SPEND
  TRANSFER
  DAILY_REWARD
  WEEKLY_REWARD
  GAME_WIN
  GAME_LOSS
  SHOP_PURCHASE
  ADMIN_ADJUSTMENT
}

enum GiveawayStatus {
  ACTIVE
  ENDED
  CANCELLED
}

enum AutoModerationTrigger {
  SPAM
  CAPS
  LINKS
  INVITES
  PROFANITY
  MENTIONS
  REPEATED_TEXT
  ZALGO
  MASS_MENTIONS
}

enum AutoModerationAction {
  DELETE
  WARN
  TIMEOUT
  KICK
  BAN
}

enum ReactionRoleType {
  NORMAL
  UNIQUE
  VERIFY
  TOGGLE
}

enum SuggestionStatus {
  PENDING
  APPROVED
  DENIED
  IMPLEMENTED
}

enum PollType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  YES_NO
}

enum EventLogCategory {
  CHANNELS
  MEMBERS
  MESSAGES
  MODERATION
  ROLES
  VOICE
  GUILD_SETTINGS
  EMOJIS_STICKERS
  INVITES
  THREADS
  SCHEDULED_EVENTS
  INTERACTIONS
}

// CORE MODELS

model GuildConfig {
  id       String @id @default(cuid())
  guild_id String @unique @db.VarChar(20)

  // Moderation settings
  moderation_log_channel_id String? @db.VarChar(20)
  auto_role_id              String? @db.VarChar(20)
  mute_role_id              String? @db.VarChar(20)

  // Level system settings
  level_system_enabled Boolean @default(false)
  level_up_channel_id  String? @db.VarChar(20)
  level_up_message     String?
  xp_rate              Float   @default(1.0)

  // Economy settings
  economy_enabled Boolean @default(false)
  daily_reward    BigInt  @default(100)
  work_reward_min BigInt  @default(50)
  work_reward_max BigInt  @default(200)

  // Ticket system settings
  ticket_category_id     String? @db.VarChar(20)
  ticket_support_role_id String? @db.VarChar(20)

  // Welcome/Leave settings
  welcome_enabled    Boolean @default(false)
  welcome_channel_id String? @db.VarChar(20)
  welcome_message    String?
  leave_enabled      Boolean @default(false)
  leave_channel_id   String? @db.VarChar(20)
  leave_message      String?

  // General settings
  language                String   @default("en")
  timezone                String   @default("UTC")
  voice_channel_templates Json? // Simplified voice channel templates as JSON
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  // Relations
  warnings                  Warning[]
  auto_moderation_rules     AutoModerationRule[]
  auto_moderation_whitelist AutoModerationWhitelist[]
  tickets                   Ticket[]
  level_roles               LevelRole[]
  user_metrics              UserMetrics[]
  user_economy              UserEconomy[]
  economy_transactions      EconomyTransaction[]
  shop_items                ShopItem[]
  shop_purchases            ShopPurchase[]
  giveaways                 Giveaway[]
  giveaway_winners          GiveawayWinner[]
  reaction_roles            ReactionRole[]
  custom_commands           CustomCommand[]
  reminders                 Reminder[]
  suggestions               Suggestion[]
  polls                     Poll[]
  forms                     Form[]
  starboard_messages        StarboardMessage[]
  scheduled_messages        ScheduledMessage[]
  temp_voice_channels       TempVoiceChannel[]
  auto_roles                AutoRole[]
  voice_activities          VoiceActivity[]
  message_templates         MessageTemplate[]
  afk_system                AFKSystem[]
  bump_reminder             BumpReminder?
  server_stats              ServerStats[]
  analytics                 Analytics[]
  event_log_configs         EventLogConfig[]

  @@index([guild_id])
  @@map("guild_configs")
}

// CONSOLIDATED USER METRICS (replaces UserLevel, UserStats, UserEngagementScore)
model UserMetrics {
  id       String @id @default(cuid())
  user_id  String @db.VarChar(20)
  guild_id String @db.VarChar(20)

  // Level system
  xp            BigInt   @default(0)
  level         Int      @default(0)
  messages_sent Int      @default(0)
  voice_time    BigInt   @default(0)
  last_xp_at    DateTime @default(now())

  // Engagement metrics
  commands_used      Int @default(0)
  reactions_given    Int @default(0)
  reactions_received Int @default(0)

  // Casino stats (simplified)
  casino_wins   Int    @default(0)
  casino_losses Int    @default(0)
  money_won     BigInt @default(0)
  money_lost    BigInt @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@unique([user_id, guild_id])
  @@index([guild_id, level])
  @@index([guild_id, xp])
  @@index([user_id])
  @@map("user_metrics")
}

model Warning {
  id           String    @id @default(cuid())
  user_id      String    @db.VarChar(20)
  moderator_id String    @db.VarChar(20)
  guild_id     String    @db.VarChar(20)
  reason       String    @db.Text
  active       Boolean   @default(true)
  expires_at   DateTime?
  created_at   DateTime  @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@index([user_id, guild_id])
  @@index([guild_id])
  @@map("warnings")
}

model AutoModerationRule {
  id          String                @id @default(cuid())
  guild_id    String                @db.VarChar(20)
  name        String
  description String?
  enabled     Boolean               @default(true)
  trigger     AutoModerationTrigger
  action      AutoModerationAction
  threshold   Int?
  duration    Int?
  channels    String[]
  roles       String[]
  keywords    String[]
  whitelist   String[]
  created_at  DateTime              @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@index([guild_id])
  @@index([enabled])
  @@map("auto_moderation_rules")
}

model Ticket {
  id            String         @id @default(cuid())
  guild_id      String         @db.VarChar(20)
  channel_id    String         @unique @db.VarChar(20)
  user_id       String         @db.VarChar(20)
  assigned_to   String?        @db.VarChar(20)
  category      String
  status        TicketStatus   @default(OPEN)
  priority      TicketPriority @default(LOW)
  subject       String
  closed_reason String?
  closed_by     String?        @db.VarChar(20)
  created_at    DateTime       @default(now())
  closed_at     DateTime?
  deleted_at    DateTime?
  deleted_by    String?        @db.VarChar(20)

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@index([guild_id])
  @@index([user_id])
  @@index([status])
  @@map("tickets")
}

model UserEconomy {
  id           String    @id @default(cuid())
  user_id      String    @db.VarChar(20)
  guild_id     String    @db.VarChar(20)
  balance      BigInt    @default(0)
  bank         BigInt    @default(0)
  last_daily   DateTime?
  last_weekly  DateTime?
  last_work    DateTime?
  daily_streak Int       @default(0)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  guild_config GuildConfig          @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
  transactions EconomyTransaction[]

  @@unique([user_id, guild_id])
  @@index([guild_id])
  @@map("user_economy")
}

model EconomyTransaction {
  id          String                 @id @default(cuid())
  user_id     String                 @db.VarChar(20)
  guild_id    String                 @db.VarChar(20)
  type        EconomyTransactionType
  amount      BigInt
  description String
  created_at  DateTime               @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
  user_economy UserEconomy @relation(fields: [user_id, guild_id], references: [user_id, guild_id], onDelete: Cascade)

  @@index([user_id, guild_id])
  @@index([guild_id])
  @@index([type])
  @@index([created_at])
  @@map("economy_transactions")
}

model ShopItem {
  id          String    @id @default(cuid())
  guild_id    String    @db.VarChar(20)
  name        String
  description String?
  price       BigInt
  role_id     String?   @db.VarChar(20)
  stock       Int?
  enabled     Boolean   @default(true)
  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  deleted_by  String?   @db.VarChar(20)

  guild_config   GuildConfig    @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
  shop_purchases ShopPurchase[]

  @@index([guild_id])
  @@index([enabled])
  @@map("shop_items")
}

model Giveaway {
  id           String         @id @default(cuid())
  guild_id     String         @db.VarChar(20)
  channel_id   String         @db.VarChar(20)
  message_id   String         @unique @db.VarChar(20)
  host_id      String         @db.VarChar(20)
  title        String
  description  String?
  prize        String
  requirements Json?
  status       GiveawayStatus @default(ACTIVE)
  ends_at      DateTime
  ended_at     DateTime?
  created_at   DateTime       @default(now())

  guild_config GuildConfig      @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
  entries      GiveawayEntry[]
  winners      GiveawayWinner[]

  @@index([guild_id])
  @@index([status])
  @@index([ends_at])
  @@map("giveaways")
}

model GiveawayEntry {
  id          String   @id @default(cuid())
  giveaway_id String
  user_id     String   @db.VarChar(20)
  entries     Int      @default(1)
  created_at  DateTime @default(now())

  giveaway Giveaway @relation(fields: [giveaway_id], references: [id], onDelete: Cascade)

  @@unique([giveaway_id, user_id])
  @@index([giveaway_id])
  @@map("giveaway_entries")
}

model ReactionRole {
  id         String           @id @default(cuid())
  guild_id   String           @db.VarChar(20)
  channel_id String           @db.VarChar(20)
  message_id String           @db.VarChar(20)
  emoji      String
  role_id    String           @db.VarChar(20)
  type       ReactionRoleType @default(NORMAL)
  created_at DateTime         @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@unique([message_id, emoji])
  @@index([guild_id])
  @@map("reaction_roles")
}

model CustomCommand {
  id          String    @id @default(cuid())
  guild_id    String    @db.VarChar(20)
  name        String
  description String?
  response    String    @db.Text
  uses        Int       @default(0)
  enabled     Boolean   @default(true)
  created_by  String    @db.VarChar(20)
  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  deleted_by  String?   @db.VarChar(20)

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@unique([guild_id, name])
  @@index([guild_id])
  @@map("custom_commands")
}

model Reminder {
  id         String   @id @default(cuid())
  user_id    String   @db.VarChar(20)
  guild_id   String?  @db.VarChar(20)
  channel_id String   @db.VarChar(20)
  message    String
  remind_at  DateTime
  created_at DateTime @default(now())
  completed  Boolean  @default(false)

  guild_config GuildConfig? @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@index([user_id])
  @@index([remind_at])
  @@index([completed])
  @@map("reminders")
}

model Suggestion {
  id         String           @id @default(cuid())
  guild_id   String           @db.VarChar(20)
  channel_id String           @db.VarChar(20)
  message_id String           @unique @db.VarChar(20)
  user_id    String           @db.VarChar(20)
  title      String
  content    String           @db.Text
  status     SuggestionStatus @default(PENDING)
  upvotes    Int              @default(0)
  downvotes  Int              @default(0)
  reason     String?
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  deleted_at DateTime?
  deleted_by String?          @db.VarChar(20)

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@index([guild_id])
  @@index([status])
  @@map("suggestions")
}

model Poll {
  id          String    @id @default(cuid())
  guild_id    String    @db.VarChar(20)
  channel_id  String    @db.VarChar(20)
  message_id  String    @unique @db.VarChar(20)
  creator_id  String    @db.VarChar(20)
  title       String
  description String?
  type        PollType  @default(SINGLE_CHOICE)
  ends_at     DateTime?
  ended       Boolean   @default(false)
  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  deleted_by  String?   @db.VarChar(20)

  guild_config GuildConfig  @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
  options      PollOption[]
  votes        PollVote[]

  @@index([guild_id])
  @@index([ended])
  @@map("polls")
}

model PollOption {
  id       String @id @default(cuid())
  poll_id  String
  text     String
  position Int

  poll       Poll       @relation(fields: [poll_id], references: [id], onDelete: Cascade)
  poll_votes PollVote[]

  @@index([poll_id])
  @@map("poll_options")
}

model PollVote {
  id         String   @id @default(cuid())
  poll_id    String
  option_id  String
  user_id    String   @db.VarChar(20)
  created_at DateTime @default(now())

  poll   Poll       @relation(fields: [poll_id], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [option_id], references: [id], onDelete: Cascade)

  @@unique([poll_id, user_id])
  @@index([poll_id])
  @@map("poll_votes")
}

model Form {
  id          String    @id @default(cuid())
  guild_id    String    @db.VarChar(20)
  name        String
  title       String
  description String?
  fields_data Json // Simplified - store form structure as JSON
  enabled     Boolean   @default(true)
  created_by  String    @db.VarChar(20)
  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  deleted_by  String?   @db.VarChar(20)

  guild_config GuildConfig      @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
  submissions  FormSubmission[]

  @@index([guild_id])
  @@map("forms")
}

model FormSubmission {
  id           String   @id @default(cuid())
  form_id      String
  user_id      String   @db.VarChar(20)
  responses    Json
  submitted_at DateTime @default(now())

  form Form @relation(fields: [form_id], references: [id], onDelete: Cascade)

  @@index([form_id])
  @@index([user_id])
  @@map("form_submissions")
}

model StarboardMessage {
  id                   String   @id @default(cuid())
  guild_id             String   @db.VarChar(20)
  original_message_id  String   @unique @db.VarChar(20)
  starboard_message_id String?  @db.VarChar(20)
  channel_id           String   @db.VarChar(20)
  author_id            String   @db.VarChar(20)
  star_count           Int      @default(0)
  created_at           DateTime @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@index([guild_id])
  @@index([star_count])
  @@map("starboard_messages")
}

model ScheduledMessage {
  id         String   @id @default(cuid())
  guild_id   String   @db.VarChar(20)
  channel_id String   @db.VarChar(20)
  content    String   @db.Text
  send_at    DateTime
  sent       Boolean  @default(false)
  created_by String   @db.VarChar(20)
  created_at DateTime @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@index([guild_id])
  @@index([send_at])
  @@index([sent])
  @@map("scheduled_messages")
}

// CONSOLIDATED ANALYTICS (replaces GuildAnalytics, AdvancedAnalytics, LogMetrics)
model Analytics {
  id       String   @id @default(cuid())
  guild_id String   @db.VarChar(20)
  date     DateTime @db.Date
  hour     Int?

  // Member metrics
  member_count Int @default(0)
  joins        Int @default(0)
  leaves       Int @default(0)

  // Activity metrics
  message_count Int @default(0)
  voice_minutes Int @default(0)
  commands_used Int @default(0)

  // Engagement metrics
  reactions_count Int @default(0)
  threads_created Int @default(0)
  tickets_created Int @default(0)

  // Error/Warning counts
  error_count   Int @default(0)
  warning_count Int @default(0)

  created_at DateTime @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@unique([guild_id, date, hour])
  @@index([guild_id])
  @@index([date])
  @@map("analytics")
}

// ADDITIONAL ESSENTIAL MODELS

model LevelRole {
  id         String   @id @default(cuid())
  guild_id   String   @db.VarChar(20)
  role_id    String   @db.VarChar(20)
  level      Int
  created_at DateTime @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@unique([guild_id, level])
  @@index([guild_id])
  @@map("level_roles")
}

model ShopPurchase {
  id         String   @id @default(cuid())
  user_id    String   @db.VarChar(20)
  guild_id   String   @db.VarChar(20)
  item_id    String
  price_paid BigInt
  quantity   Int      @default(1)
  created_at DateTime @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
  shop_item    ShopItem    @relation(fields: [item_id], references: [id], onDelete: Cascade)

  @@index([user_id, guild_id])
  @@index([item_id])
  @@index([created_at])
  @@map("shop_purchases")
}

model GiveawayWinner {
  id          String   @id @default(cuid())
  giveaway_id String
  user_id     String   @db.VarChar(20)
  guild_id    String   @db.VarChar(20)
  won_at      DateTime @default(now())

  giveaway     Giveaway    @relation(fields: [giveaway_id], references: [id], onDelete: Cascade)
  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@unique([giveaway_id, user_id])
  @@index([user_id])
  @@map("giveaway_winners")
}

model TempVoiceChannel {
  id              String    @id @default(cuid())
  guild_id        String    @db.VarChar(20)
  channel_id      String    @unique @db.VarChar(20)
  owner_id        String    @db.VarChar(20)
  parent_category String?   @db.VarChar(20)
  channel_name    String
  user_limit      Int?
  bitrate         Int?
  region          String?
  allowed_users   String[]
  banned_users    String[]
  locked          Boolean   @default(false)
  hidden          Boolean   @default(false)
  auto_delete     Boolean   @default(true)
  delete_timeout  Int       @default(300)
  created_at      DateTime  @default(now())
  expires_at      DateTime?

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@index([guild_id])
  @@index([owner_id])
  @@index([expires_at])
  @@map("temp_voice_channels")
}

model AutoRole {
  id            String   @id @default(cuid())
  guild_id      String   @db.VarChar(20)
  role_id       String   @db.VarChar(20)
  trigger       String
  conditions    Json?
  delay         Int?
  message_id    String?  @db.VarChar(20)
  emoji         String?
  button_data   Json?
  enabled       Boolean  @default(true)
  position      Int      @default(0)
  created_by_id String   @db.VarChar(20)
  created_at    DateTime @default(now())

  guild_config GuildConfig          @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
  assignments  AutoRoleAssignment[]

  @@index([guild_id])
  @@index([enabled])
  @@map("auto_roles")
}

model AutoRoleAssignment {
  id           String    @id @default(cuid())
  auto_role_id String
  user_id      String    @db.VarChar(20)
  guild_id     String    @db.VarChar(20)
  assigned_at  DateTime  @default(now())
  removed_at   DateTime?

  auto_role AutoRole @relation(fields: [auto_role_id], references: [id], onDelete: Cascade)

  @@unique([auto_role_id, user_id])
  @@index([user_id, guild_id])
  @@index([assigned_at])
  @@map("auto_role_assignments")
}

model VoiceActivity {
  id               String    @id @default(cuid())
  user_id          String    @db.VarChar(20)
  guild_id         String    @db.VarChar(20)
  channel_id       String    @db.VarChar(20)
  session_start    DateTime  @default(now())
  session_end      DateTime?
  duration_seconds Int?
  muted            Boolean   @default(false)
  deafened         Boolean   @default(false)
  streaming        Boolean   @default(false)
  camera           Boolean   @default(false)

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@index([user_id, guild_id])
  @@index([channel_id])
  @@index([session_start])
  @@index([duration_seconds])
  @@map("voice_activities")
}

model MessageTemplate {
  id            String   @id @default(cuid())
  guild_id      String   @db.VarChar(20)
  name          String
  description   String?  @db.Text
  content       String   @db.Text
  embed_data    Json?
  variables     String[]
  category      String   @default("general")
  uses          Int      @default(0)
  enabled       Boolean  @default(true)
  created_by_id String   @db.VarChar(20)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@unique([guild_id, name])
  @@index([guild_id])
  @@index([category])
  @@map("message_templates")
}

model AFKSystem {
  id       String   @id @default(cuid())
  user_id  String   @db.VarChar(20)
  guild_id String   @db.VarChar(20)
  reason   String?  @db.Text
  set_at   DateTime @default(now())
  mentions Int      @default(0)

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@unique([user_id, guild_id])
  @@index([guild_id])
  @@index([set_at])
  @@map("afk_system")
}

model BumpReminder {
  id               String    @id @default(cuid())
  guild_id         String    @unique @db.VarChar(20)
  channel_id       String    @db.VarChar(20)
  message_template String    @db.Text
  interval_hours   Int       @default(2)
  role_to_ping     String?   @db.VarChar(20)
  next_bump_at     DateTime
  last_bump_at     DateTime?
  auto_bump        Boolean   @default(false)
  enabled          Boolean   @default(true)
  created_by_id    String    @db.VarChar(20)
  created_at       DateTime  @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
  bump_logs    BumpLog[]

  @@index([next_bump_at])
  @@index([enabled])
  @@map("bump_reminders")
}

model BumpLog {
  id          String   @id @default(cuid())
  reminder_id String
  guild_id    String   @db.VarChar(20)
  bumped_by   String   @db.VarChar(20)
  bumped_at   DateTime @default(now())
  auto_bump   Boolean  @default(false)

  reminder BumpReminder @relation(fields: [reminder_id], references: [id], onDelete: Cascade)

  @@index([reminder_id])
  @@index([guild_id])
  @@index([bumped_at])
  @@map("bump_logs")
}

model ServerStats {
  id              String    @id @default(cuid())
  guild_id        String    @db.VarChar(20)
  stat_type       String
  channel_id      String    @db.VarChar(20)
  format_string   String    @default("{stat}")
  update_interval Int       @default(600)
  last_updated    DateTime?
  enabled         Boolean   @default(true)
  created_by_id   String    @db.VarChar(20)
  created_at      DateTime  @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@unique([guild_id, stat_type])
  @@index([guild_id])
  @@index([enabled])
  @@map("server_stats")
}

model AutoModerationWhitelist {
  id            String   @id @default(cuid())
  guild_id      String   @db.VarChar(20)
  type          String
  value         String
  description   String?
  enabled       Boolean  @default(true)
  created_by_id String   @db.VarChar(20)
  created_at    DateTime @default(now())

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@unique([guild_id, type, value])
  @@index([guild_id])
  @@index([type])
  @@map("auto_moderation_whitelist")
}

// EVENT LOGGING SYSTEM

model EventLogConfig {
  id            String           @id @default(cuid())
  guild_id      String           @db.VarChar(20)
  category      EventLogCategory
  enabled       Boolean          @default(false)
  channel_id    String?          @db.VarChar(20)
  webhook_url   String?          @db.Text
  color         String?          @db.VarChar(7) // Hex color
  include_bots  Boolean          @default(false)
  template      String?          @db.Text
  created_by_id String           @db.VarChar(20)
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt

  guild_config GuildConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

  @@index([guild_id])
  @@index([enabled])
  @@index([guild_id, category])
  @@map("event_log_configs")
}

// WEB DASHBOARD MODELS

model User {
  id          String   @id @db.VarChar(20) // Discord User ID
  username    String
  global_name String?
  avatar      String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  session UserSession?

  @@map("users")
}

model UserSession {
  id                       String   @id @default(cuid())
  user_id                  String   @unique @db.VarChar(20)
  discord_access_token     String // Encrypted
  discord_refresh_token    String? // Encrypted  
  discord_token_expires_at DateTime
  session_expires_at       DateTime
  last_used_at             DateTime @default(now())
  created_at               DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([session_expires_at])
  @@map("user_sessions")
}
